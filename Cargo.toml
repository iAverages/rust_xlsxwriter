[package]
name = "rust_xlsxwriter"
description = "A Rust library for writing Excel 2007 xlsx files"
authors = ["John McNamara <jmcnamara@cpan.org>"]
homepage = "https://rustxlsxwriter.github.io"
repository = "https://github.com/jmcnamara/rust_xlsxwriter"
keywords = ["excel", "xlsx"]
readme = "README.md"
license = "MIT OR Apache-2.0"
version = "0.56.0"
edition = "2021"

[dependencies]
chrono = {version = "0.4.31", default-features = false, features = ["clock", "wasmbind"], optional = true}
zip = {version = "0.6.4 ", default-features = false, features = ["deflate"]}
regex = "1.7.3"
lazy_static = "1.4.0"
polars= {version = "0.35.4", default-features = false, features = [], optional = true}
js-sys = {version = "0.3.64", optional = true}
wasm-bindgen = {version = "0.2.87", optional = true}
serde = { version = "1.0.193", features = ["derive"] } # todo make derive a dev dependency.

[dev-dependencies]
pretty_assertions = "1.3.0"

[features]
# `default`: Includes all the standard functionality.
default = []

# `zlib`: Adds a dependency on zlib and a C compiler. This includes the same
#  features as `default` but is 1.5x faster for large files.
zlib = ["zip/deflate-zlib"]

# `chrono`: Add support for Chrono dates/times in addition to the native
# ExcelDateTime types.
chrono = ["dep:chrono"]

# `polars`: Add support for mapping between `PolarsError` and
# `rust_xlsxwriter::XlsxError` to make code that handles both types of error
# easier to write.
polars = ["dep:polars"]

# `wasm`: Enable wasm/Javascript compilation.
wasm = ["js-sys", "wasm-bindgen"]

# `test-resave`: Developer only testing feature.
test-resave = []

# Turn off default testing of the docs beacuse it is slow. It can still be done
# explicitly using the --doc flag and it is also tested in the CI.
[lib]
doctest = false

# Examples to run only when `chrono` is enabled.
[[example]]
name = "doc_worksheet_write_datetime_chrono"
path = "examples/doc_worksheet_write_datetime_chrono.rs"
required-features = ["chrono"]

[[example]]
name = "doc_worksheet_write_date_chrono"
path = "examples/doc_worksheet_write_date_chrono.rs"
required-features = ["chrono"]

[[example]]
name = "doc_worksheet_write_time_chrono"
path = "examples/doc_worksheet_write_time_chrono.rs"
required-features = ["chrono"]

[[example]]
name = "doc_properties_checksum2_chrono"
path = "examples/doc_properties_checksum2_chrono.rs"
required-features = ["chrono"]


[package.metadata.commands]
# Some local package management and release check commands.
# Uses Cargo Commander.

spellcheck = {cmd = [
    "for f in src/*.rs; do aspell --lang=en_US --check $f; done",
    "for f in examples/*.rs; do aspell --lang=en_US --check $f; done",
    "aspell --lang=en_US --check examples/README.md",
    "aspell --lang=en_US --check README.md"
]}

coverage = {cmd = [
    "rm -rf target/coverage",
    "mkdir -p target/coverage",
    "CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='target/coverage/rust_xlsxwriter-%p-%m.profraw' cargo test",
    "grcov target/coverage/ --binary-path ./target/debug/deps/ -s src -t lcov --branch -o target/coverage/lcov.info",
    "grcov target/coverage/ --binary-path ./target/debug/deps/ -s src -t html --branch -o target/coverage/html",
    "rm target/coverage/*.profraw",
    "open target/coverage/html/index.html"
]}

release_check = {cmd = ["../release/release_check.sh"]}

# Profile
# cargo instruments -t time --example app_perf_test

# Clippy commands
# cargo clippy --all-targets -- -Dwarnings
# cargo +nightly rustdoc-clippy
